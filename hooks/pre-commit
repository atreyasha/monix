#!/usr/bin/env bash
# Pre-commit git hook which offers multiple functionalities,
# including updating python dependencies, linting shell and R scripts
# and converting an org document to markdown for logging purposes

find_non_deleted_staged() {
  # function to check if input has been staged
  local input="$1"
  git diff --name-only --cached --diff-filter=d "$input" 2>/dev/null
}

update_python_dependencies() {
  # function to synchronize poetry.lock with requirements.txt
  local poetry_staged
  # update requirements.txt given conditions
  if command -v poetry &>/dev/null; then
    mapfile -t poetry_staged < <(find_non_deleted_staged "poetry.lock")
    if ((${#poetry_staged[@]})); then
      printf "%s\n" "Syncing python dependencies with poetry"
      poetry export -f requirements.txt --without-hashes -o requirements.txt
      git add "requirements.txt"
    fi
  fi
}

lint_shell_scripts() {
  # function to lint all shell files
  local input="$1" shell_staged
  # lint staged shell scripts
  if command -v shfmt &>/dev/null; then
    mapfile -t shell_staged < <(find_non_deleted_staged "$input")
    if ((${#shell_staged[@]})); then
      printf "%s\n" "Linting shell scripts with shfmt"
      shfmt -w -i 2 "${shell_staged[@]}"
      git add "${shell_staged[@]}"
    fi
  fi
}

lint_R_scripts() {
  # function to lint all R files
  local input="$1" R_staged R_file
  # lint staged R files
  if Rscript -e 'styler::style_file' &>/dev/null; then
    mapfile -t R_staged < <(find_non_deleted_staged "$input")
    if ((${#R_staged[@]})); then
      printf "%s\n" "Linting R scripts"
      for R_file in "${R_staged[@]}"; do
        Rscript -e "styler::style_file(\"$R_file\")"
      done
      git add "${R_staged[@]}"
    fi
  fi
}

convert_org_to_md() {
  # function to convert org doc to markdown
  local input="$1" output org_staged input_file
  # conduct checks and convert
  if command -v pandoc &>/dev/null; then
    mapfile -t org_staged < <(find_non_deleted_staged "$input")
    if ((${#org_staged[@]})); then
      for input_file in "${org_staged[@]}"; do
        [[ "$input_file" =~ .*\.org$ ]] || continue
        output="${input_file//.org/.md}"
        printf "%s\n" "Converting relevant org files to markdown"
        # basic conversion to markdown
        pandoc -f org -t markdown -o "$output" "$input_file"
        # add TOC to markdown
        pandoc -s -t markdown --toc -o "$output" "$output"
        # add TOC title
        sed -i '1 i\## Table of Contents' "$output"
        # replace org-agenda markers cleanly
        sed -i 's/\[TODO\]{.*}/**TODO**/g; s/\[DONE\]{.*}/**DONE**/g' "$output"
        # replace startup visibility cleanly
        # shellcheck disable=SC2016
        sed -i '/```{=org}/,/```/d' "$output"
        # stage new markdown for commit
        git add "$output"
      done
    fi
  fi
}

main() {
  # main call to functions
  # NOTE: user edit(s) go here
  update_python_dependencies
  lint_shell_scripts "*.sh"
  lint_R_scripts "*.R"
  convert_org_to_md "*.org"
}

main
